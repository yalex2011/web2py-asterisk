# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

#########################################################################
## This is a sample controller
## - index is the default action of any application
## - user is required for authentication and authorization
## - download is for downloading files uploaded in the db (does streaming)
## - call exposes all registered services (none by default)
#########################################################################


def index():
    """
    example action using the internationalization operator T and flash
    rendered by views/default/index.html or views/generic.html

    if you need a simple wiki simple replace the two lines below with:
    return auth.wiki()
    """
    if auth.user:
        if auth.user.first_name == 'admin':
            grid = SQLFORM.smartgrid(db.phonebook,fields=[db.phonebook.office,db.phonebook.office_name,db.phonebook.fio,db.phonebook.internal,db.phonebook.external],
                             headers={'phonebook.office':T('Office'),
                                      'phonebook.office_name':T('Office Name'),
                                      'phonebook.fio':T('Person'),
                                      'phonebook.internal':T('Internal'),
                                      'phonebook.external':T('External')
                                      },
                             orderby='office',
                             deletable=True,
                             editable=True,
                             create=True,
                             maxtextlengths={'phonebook.office_name':150,'phonebook.fio':70},
                             )
        else:
    #grid = SQLFORM.smartgrid(db.cdr,fields=[db.cdr.calldate,db.cdr.clid,db.cdr.src,db.cdr.dst,db.cdr.disposition,db.cdr.billsec])
            grid = SQLFORM.smartgrid(db.phonebook,fields=[db.phonebook.office,db.phonebook.office_name,db.phonebook.fio,db.phonebook.internal,db.phonebook.external],
                             headers={'phonebook.office':T('Office'),
                                      'phonebook.office_name':T('Office Name'),
                                      'phonebook.fio':T('Person'),
                                      'phonebook.internal':T('Internal'),
                                      'phonebook.external':T('External')
                                      },
                             orderby='office',
                             deletable=False,
                             editable=False,
                             create=False,
                             maxtextlengths={'phonebook.office_name':150,'phonebook.fio':70},
                             )
    else:
        grid = SQLFORM.smartgrid(db.phonebook,fields=[db.phonebook.office,db.phonebook.office_name,db.phonebook.fio,db.phonebook.internal,db.phonebook.external],
                             headers={'phonebook.office':T('Office'),
                                      'phonebook.office_name':T('Office Name'),
                                      'phonebook.fio':T('Person'),
                                      'phonebook.internal':T('Internal'),
                                      'phonebook.external':T('External')
                                      },
                             orderby='office',
                             deletable=False,
                             editable=False,
                             create=False,
                             maxtextlengths={'phonebook.office_name':150,'phonebook.fio':70},
                             )

            
    
    #cdr = db.executesql('SELECT * FROM cdr;')
    response.flash = T("Welcome to Asterisk CDR viewer!")
    
    return dict(message=T('Hello World'),grid=grid)

@auth.requires_login()
def logview():
    grid = SQLFORM.grid(db.cdr,fields=[db.cdr.calldate,db.cdr.clid,db.cdr.src,db.cdr.dst,db.cdr.disposition,db.cdr.billsec],
                        orderby='calldate',
                        deletable=False,
                        editable=False,
                        create=False,
                        )
    if auth.user:
        if auth.user.first_name == 'admin':
            grid = SQLFORM.grid(db.cdr,fields=[db.cdr.calldate,db.cdr.clid,db.cdr.src,db.cdr.dst,db.cdr.disposition,db.cdr.billsec],
                        orderby='calldate',
                        deletable=False,
                        editable=False,
                        create=False,
                        )
        
    return dict(grid=grid)

def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/manage_users (requires membership in 
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    """
    return dict(form=auth())

@cache.action()
def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()


@auth.requires_signature()
def data():
    """
    http://..../[app]/default/data/tables
    http://..../[app]/default/data/create/[table]
    http://..../[app]/default/data/read/[table]/[id]
    http://..../[app]/default/data/update/[table]/[id]
    http://..../[app]/default/data/delete/[table]/[id]
    http://..../[app]/default/data/select/[table]
    http://..../[app]/default/data/search/[table]
    but URLs must be signed, i.e. linked with
      A('table',_href=URL('data/tables',user_signature=True))
    or with the signed load operator
      LOAD('default','data.load',args='tables',ajax=True,user_signature=True)
    """
    return dict(form=crud())
